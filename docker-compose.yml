services:
    db:
        image: postgres:13
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASS}
        container_name: postgres_db
        ports:
            - "6543:5432"
        volumes:
            - pg_data:/var/lib/postgresql/data
            - ./db-init-scripts:/docker-entrypoint-initdb.d
        networks:
            - backend
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
            interval: 5s
            timeout: 5s
            retries: 5
   
    ingestion:
        build:
            context: ./ingestion
        container_name: ingestion
        env_file:
            - ./ingestion/.env
        volumes:
            - ./data:/data
        depends_on:
            db:
                condition: service_healthy
        networks:
            - backend
   
    zookeeper:
        image: confluentinc/cp-zookeeper:7.6.0
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
        ports:
            - "2181:2181"
        networks:
            - backend
        healthcheck:
            test: ["CMD-SHELL", "echo stat | nc localhost 2181"]
            interval: 5s
            timeout: 5s
            retries: 5
            
    kafka:
        image: confluentinc/cp-kafka:7.6.0
        container_name: kafka
        depends_on:
            zookeeper:
                condition: service_healthy
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
        networks:
            - backend
        healthcheck:
            test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
            interval: 10s
            timeout: 10s
            retries: 10
            start_period: 30s

    init-kafka:
        image: confluentinc/cp-kafka:7.6.0
        container_name: init_kafka
        depends_on:
            - kafka
        command: |
            bash -c "
            echo 'Waiting for Kafka to be ready...' && \
            cub kafka-ready -b kafka:9092 1 60 && \
            echo 'Creating Kafka topics...' && \
            kafka-topics --create --if-not-exists --topic transactions --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 && \
            kafka-topics --create --if-not-exists --topic ownership_graph --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 && \
            kafka-topics --create --if-not-exists --topic enriched_transactions --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 && \
            echo 'Kafka topics created successfully.'
            "
        networks:
            - backend

    streaming_producer:
        build: ./streaming
        container_name: streaming_producer
        volumes:
            - ./data:/app/data
        env_file:
            - ./streaming/.env
        depends_on:
            ingestion:
                condition: service_completed_successfully
            kafka:
                condition: service_healthy
            db:
                condition: service_healthy
            init-kafka:
                condition: service_completed_successfully
        networks:
            - backend
        command: ["python", "-m", "app.main", "--mode", "producer"]
        restart: unless-stopped

    streaming_consumer:
        build: ./streaming
        container_name: streaming_consumer
        volumes:
            - ./data:/app/data
        env_file:
            - ./streaming/.env
        depends_on:
            ingestion:
                condition: service_completed_successfully
            kafka:
                condition: service_healthy
            db:
                condition: service_healthy
            init-kafka:
                condition: service_completed_successfully
        networks:
            - backend
        command: ["python", "-m", "app.main", "--mode", "consumer"]
        restart: unless-stopped

    neo4j:
        image: neo4j:5.13.0-community
        container_name: neo4j
        environment:
            - NEO4J_AUTH=neo4j/testpassword
            - NEO4J_dbms_security_procedures_unrestricted=apoc.*
            - NEO4J_apoc_export_file_enabled=true
            - NEO4J_apoc_import_file_enabled=true
        ports:
            - "7474:7474"  # Web UI
            - "7687:7687"  # Bolt Protocol
        volumes:
            - neo4j_data:/data
            - ./storage/neo4j_import:/var/lib/neo4j/import
        env_file:
            - ./storage/.env
        networks:
            - backend
        healthcheck:
            test: [ "CMD", "wget", "--spider", "-q", "http://localhost:7474" ]
            interval: 10s
            timeout: 10s
            retries: 5

volumes:
    pg_data:
    neo4j_data:

networks:
    backend:
        driver: bridge